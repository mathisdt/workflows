name: Build

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.13'
      upload-to-pypi:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Display branch name
        run: |
          echo "current branch: $GITHUB_REF"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Build package locally
        run: |
          pip3 install build
          python3 -m build
      - name: Upload package to PyPI
        if: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && inputs.upload-to-pypi }}
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip3 install twine
          # TODO remove "--repository testpypi" after testing ===> and reset version to "1" in pyproject.toml <===
          python3 -m twine upload --repository testpypi --verbose dist/*
      - name: Increase version number
        if: ${{ success() }}
        run: |
          pip3 install tomli tomli-w
          python3 <<EOF
          import tomli, tomli_w
          with open("pyproject.toml", "rb") as f:
            data = tomli.load(f)
          print(f'previous version: {data["project"]["version"]}')
          data["project"]["version"] = str(int(data["project"]["version"])+1)
          print(f'updated version:  {data["project"]["version"]}')
          with open("pyproject.toml", "wb") as f:
            tomli_w.dump(data, f)
          EOF
      - name: Commit and push increased version
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILE_TO_COMMIT: pyproject.toml
        run: |
          export DESTINATION_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          export SHA=$(git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT)
          export CONTENT=$(base64 -i $FILE_TO_COMMIT)
          gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
            --field message="update version number [skip actions]" \
            --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$DESTINATION_BRANCH" \
            --field sha="$SHA"
